<local:XTextBox
	x:Class="BlueStacks.Common.CustomTextBox" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:local="clr-namespace:BlueStacks.Common"
	Name="mTextBox"
	Style="{DynamicResource TextBoxStyle}">
	<FrameworkElement.Resources>
		<ResourceDictionary>
			<Style
				TargetType="{x:Type Popup}"
				x:Key="CenteredHorizontalOffsetStyle">
				<Setter
					Property="Popup.HorizontalOffset">
					<Setter.Value>
						<MultiBinding
							Converter="{local:CenterToolTipConverter}">
							<Binding
								Path="PlacementTarget.ActualWidth"
								RelativeSource="{RelativeSource Self}" />
							<Binding
								Path="Child.ActualWidth"
								RelativeSource="{RelativeSource Self}" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
				<Setter
					Property="Popup.VerticalOffset">
					<Setter.Value>
						<MultiBinding
							Converter="{local:CenterToolTipConverter}">
							<Binding
								Path="PlacementTarget.ActualHeight"
								RelativeSource="{RelativeSource Self}" />
							<Binding
								Path="Child.ActualHeight"
								RelativeSource="{RelativeSource Self}" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type local:XTextBox}"
				x:Key="TextBoxStyle">
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.AllowDrop"
					Value="True" />
				<Setter
					Property="BorderThickness"
					Value="1,1,1.2,1" />
				<Setter
					Property="Padding"
					Value="2" />
				<Setter
					Property="FontSize"
					Value="14" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Left" />
				<Setter
					Property="Foreground"
					Value="{Binding Path=ColorModel.[TextBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
				<Setter
					Property="Background"
					Value="{Binding Path=ColorModel.[TextBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
				<Setter
					Property="BorderBrush"
					Value="{Binding Path=ColorModel.[TextBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
				<Setter
					Property="Validation.ErrorTemplate">
					<Setter.Value>
						<ControlTemplate>
							<Grid>
								<AdornedElementPlaceholder
									Name="placeholder" />
								<local:CustomPopUp
									AllowsTransparency="True"
									Placement="Top"
									VerticalOffset="0"
									Style="{StaticResource CenteredHorizontalOffsetStyle}"
									PlacementTarget="{Binding ElementName=placeholder}"
									IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocused, Mode=OneWay}">
									<Border
										Style="{StaticResource ShadowBorderForPopup}">
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition
													Height="Auto" />
												<RowDefinition
													Height="10" />
											</Grid.RowDefinitions>
											<Border
												Style="{StaticResource OuterBorder}"
												BorderBrush="{Binding Path=ColorModel.[RedMouseOutGridBackGround], Source={x:Static local:BlueStacksUIBinding.Instance}}"
												Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
												<Grid>
													<UIElement.OpacityMask>
														<VisualBrush
															Stretch="None"
															Visual="{Binding ElementName=mMaskBorder}" />
													</UIElement.OpacityMask>
													<Border
														Name="mMaskBorder"
														Style="{StaticResource MaskBorder}"
														Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
													<Grid
														Margin="7,5,7,5">
														<TextBlock
															HorizontalAlignment="Center"
															Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
															Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent, Mode=OneWay}" />
													</Grid>
												</Grid>
											</Border>
											<Grid
												Row="1">
												<Path
													Name="mDownArrow"
													Data="M0,0 L8,10 L16,0"
													Margin="0,-1,0,0"
													HorizontalAlignment="Center"
													Fill="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
													Stroke="{Binding Path=ColorModel.[RedMouseOutGridBackGround], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
											</Grid>
										</Grid>
									</Border>
								</local:CustomPopUp>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type local:CustomTextBox}">
							<Border
								Name="Border"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								Background="{TemplateBinding Background}">
								<ScrollViewer
									Name="PART_ContentHost"
									Margin="0" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="Border"
										Property="BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxHoverBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
								</Trigger>
								<Trigger
									Property="UIElement.IsKeyboardFocused"
									Value="True">
									<Setter
										TargetName="Border"
										Property="BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxFocussedBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										TargetName="Border"
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxFocussedBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxFocussedBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										Property="Foreground"
										Value="{Binding Path=ColorModel.[TextBoxFocussedForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
								</Trigger>
								<Trigger
									Property="IsEnabled"
									Value="False">
									<Setter
										TargetName="Border"
										Property="UIElement.Opacity"
										Value="0.6" />
									<Setter
										Property="UIElement.Opacity"
										Value="0.6" />
								</Trigger>
								<Trigger
									Property="local:XTextBox.InputTextValidity"
									Value="Error">
									<Setter
										TargetName="Border"
										Property="BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxErrorBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										TargetName="Border"
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxErrorBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxErrorBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
								</Trigger>
								<Trigger
									Property="local:XTextBox.InputTextValidity"
									Value="Warning">
									<Setter
										TargetName="Border"
										Property="BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxWarningBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										TargetName="Border"
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxWarningBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
									<Setter
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxWarningBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="local:XTextBox.ErrorIfNullOrEmpty"
											Value="True" />
										<Condition
											Property="Text"
											Value="" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter
											Property="local:XTextBox.InputTextValidity"
											Value="Error" />
									</MultiTrigger.Setters>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition
											Property="local:XTextBox.ErrorIfNullOrEmpty"
											Value="True" />
										<Condition
											Property="Text"
											Value="{x:Null}" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter
											Property="local:XTextBox.InputTextValidity"
											Value="Error" />
									</MultiTrigger.Setters>
								</MultiTrigger>
								<Trigger
									Property="Validation.HasError"
									Value="True">
									<Setter
										Property="local:XTextBox.InputTextValidity"
										Value="Error" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger
						Property="TextBoxBase.IsReadOnly"
						Value="True">
						<Setter
							Property="Template">
							<Setter.Value>
								<ControlTemplate
									TargetType="{x:Type TextBox}">
									<TextBlock
										Name="mTextBlock"
										Text="{TemplateBinding Text}"
										TextTrimming="CharacterEllipsis"
										VerticalAlignment="Center"
										Width="{TemplateBinding Width}"
										Foreground="{Binding Path=ColorModel.[TextBoxFocussedForegroundColor]}"
										ToolTip="{Binding Path=Text, RelativeSource={RelativeSource self}}" />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
		</ResourceDictionary>
	</FrameworkElement.Resources>
</local:XTextBox>
